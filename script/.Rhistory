next;
}
if (  grepl("Czynsz",unikalneOgloszenia[[i]][j] ) ){
czynsz <-   (unlist(unikalneOgloszenia[[i]][j]%>%strsplit(": "))[2]%>%str_replace_all("[^\\d,]", "" ))
next;
}
if (  grepl("Forma własności",unikalneOgloszenia[[i]][j] ) ){
formaWlasnosci <-   (unlist(unikalneOgloszenia[[i]][j]%>%strsplit(": "))[2])
next;
}
}
lokalizacja<-unikalneOgloszenia[[i]][ length(unikalneOgloszenia[[i]])-1]
link<-unikalneOgloszenia[[i]][ length(unikalneOgloszenia[[i]])]
wektorDanych<-c(cena,powierzchnia,lokalizacja,liczbaPokoi,rynek,rodzajZabudowy,pietro,liczbaPieter,materialBudynku,okna,ogrzewanie,stanWykonczenia,czynsz,formaWlasnosci,link)
print(wektorDanych)
write.table(rbind(wektorDanych), file = "myfile2", row.names =FALSE, col.names = FALSE,sep = "\t", append = TRUE,na = "NA")
}
}
write.table(rbind(wektorDanych), file = "myfile2", row.names =FALSE, col.names = FALSE,sep = "\t", append = TRUE,na = "NA")
write.table(rbind(wektorDanych), file = "myfile2", row.names =FALSE, col.names = FALSE,sep = "\t", append = TRUE,na = "NA")
setwd("C:/R_project_pja/script")
#R project
#Script name     :covid19_01ETL_v10.R
#Description     :This script will load data about covic19 from heterogenics sources.
#                 Transform data, and build base dataset.
#
#
#Author		               :Roman Ch?dzy?ski
#Last modification date  :2020-04-19
#Last R_version    :R version 3.6.3
#
# v1.0 by Roman Ch?dzy?ski - initial version
# v1.1 by Roman Ch?dzy?ski - change sources for   European Center for Disease Prevention from Excel to csv
#######################################################
#
# INIT - INITIAL SECTION
#
#######################################################
#clear terminal
cat("\f")
#clear all objects
rm(list=ls())
#clear memory
gc()
###############################
# INIT- LIBRARY SECTION
#these libraries are necessary
if(!require("utils")) install.packages("utils")
library(utils)
if(!require("data.table")) install.packages("data.table")
library("data.table")
if(!require("readxl")) install.packages("readxl")
library(readxl)
if(!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
if(!require("httr")) install.packages("httr")
library(httr)
if(!require("lubridate")) install.packages("lubridate")
library(lubridate)
if(!require("dplyr")) install.packages("dplyr")
library(dplyr)
if(!require("jsonify")) install.packages("jsonify")
library(jsonify)
if(!require("fs")) install.packages("fs")
library(fs)
if(!require("reshape")) install.packages("reshape")
library(reshape)
###############################
# INIT- FUNCTION AND SECTION
#funkction read many excel file
read_multiple_excel <- function(path) {
path %>%
excel_sheets() %>%
set_names() %>%
map_df(read_excel, path = path)
}
###############################
# INIT- CONST AND GLOBAL VAR SECTION
#Exported dataset
CONST_EXPORT_DATASET <- c('df_COVID19Base', 'df_Country_DICT')
#URL - Target dataset covid19, from the European Center for Disease Prevention and Control
CONST_ECfDP_URL <- "https://opendata.ecdc.europa.eu/covid19/casedistribution/csv"
#files with data about population over 70
CONST_WORLDBANK_FILES <- "C:/R_project_pja/data/WorldBank/"
#files with data about country
CONST_COUTRY_FILE <- "C:/R_project_pja/data/country.txt"
#Key for identity country
CONST_COUNTRY_KEY <- "country"
CONST_COUNTRYID_KEY <- "countryID"
#######################################################
#
# MAIN - EXTRACT (IMPORT) DATA SECTION
#
#######################################################
###############################
# MAIN - EXTRACT DATA FROM URL the European Center for Disease Prevention and Control
#download the dataset from the website to a local temporary file
#read the Dataset sheet into ?R?. The dataset will be called "data".
data_m00 <- read.csv(CONST_ECfDP_URL, na.strings = "", fileEncoding = "UTF-8-BOM")
#change name of colummn to identity
setnames(data_m00, "countriesAndTerritories",  CONST_COUNTRY_KEY)
setnames(data_m00, "countryterritoryCode",  CONST_COUNTRYID_KEY)
###############################
# MAIN - EXTRACT DATA FROM FILEs previusly download from WorldBank site
#add dataSet obout population over 70 from WorldBank file
data_df <- dir_ls(path = CONST_WORLDBANK_FILES , regexp = "xls")  %>%
map_df(read_excel, .id = "fileName")
#filter date only form filter colummn and 2018 year
df_WordBank <- data_df[,c('fileName',"Country Name","Country Code","2018")]
#transform WorldBank dataSet to add group sex and age
df_WordBank <- mutate(df_WordBank, sexAge= gsub(CONST_WORLDBANK_FILES,'', fileName))
df_WordBank <- mutate(df_WordBank, sexAge= gsub(".xls",'', sexAge))
#change name of colummn to identity
setnames(df_WordBank, "Country Name",  CONST_COUNTRY_KEY)
setnames(df_WordBank, "Country Code",  CONST_COUNTRYID_KEY)
#transform WorldBank dataSet, pivot transformation
df_WordBank_PSum <- cast(df_WordBank, countryID ~ sexAge, value=2018)
#clear variables
rm(data_df)
rm(df_WordBank)
###############################
# MAIN - EXTRACT DATA FROM FILE previusly download from gitHUB site
#add dataSet with specific info about Country 'capital','region','subregion','borders','area','latlng'
df_Country_00 <- jsonify::from_json(CONST_COUTRY_FILE)
#add (rebiuild) name of country
df_Country_00 <- cbind(df_Country_00, df_Country_00$name[1])
df_Country_00 <- cbind(df_Country_00, df_Country_00$name[2])
setnames(df_Country_00, "common",  "countryCommonName")
setnames(df_Country_00, "official", "countryOfficialName")
#rebuild vector data 'latlng' to singel data  'lat' and 'lng'
for (i in seq.int(nrow(df_Country_00))) {
df_Country_00[i,c('lat')] <- df_Country_00$latlng[[i]][1]
df_Country_00[i,c('lng')] <- df_Country_00$latlng[[i]][2]
}
df_Country_01 <- df_Country_00[, c("countryCommonName", "countryOfficialName", 'cca3','capital','region','subregion','borders','area','lat','lng')]
setnames(df_Country_01, "cca3",  CONST_COUNTRYID_KEY)
#clear variables
rm(df_Country_00)
#######################################################
#
# MAIN - TRANSFORM (ENRICHMENT) DATA SECTION
#
#######################################################
#join (enrichment) base data about coronavirus with data about population from WorldBank
data_m01 <- merge(x=data_m00, y=df_WordBank_PSum, by = CONST_COUNTRYID_KEY, all=FALSE)
#transform data, add importanta colummns with agregation
data_m01 <- mutate(group_by(data_m01,country), cumsumDeaths=order_by(dateRep, cumsum(deaths)))
data_m01 <- mutate(group_by(data_m01,country), cumsumCases=order_by(dateRep, cumsum(cases)))
data_m01 <- mutate(group_by(data_m01,country), indexCases=order_by(dateRep, cumsum(ifelse(cumsumCases >0, 1, 0))))
data_m01 <- mutate(group_by(data_m01,country), indexDeaths=order_by(dateRep, cumsum(ifelse(cumsumDeaths >0, 1, 0))))
data_m01 <- mutate(group_by(data_m01,country), index100Cases=order_by(dateRep, cumsum(ifelse(cumsumCases >100, 1, 0))))
data_m01 <- mutate(group_by(data_m01,country), index10Deaths=order_by(dateRep, cumsum(ifelse(cumsumDeaths >10, 1, 0))))
data_m01 <- mutate(data_m01,indexWeekDeaths=ceiling(indexDeaths/7))
data_m01 <- mutate(data_m01,indexWeekCases=ceiling(indexCases/7))
data_m01 <- mutate(data_m01,index10WeekDeaths=ceiling(index10Deaths/7))
data_m01 <- mutate(data_m01,index100WeekCases=ceiling(index100Cases/7))
data_m01 <- mutate(data_m01,popData2018_F_70_74=ceiling(popData2018*F_70_74/100))
data_m01 <- mutate(data_m01,popData2018_M_70_74=ceiling(popData2018*M_70_74/100))
data_m01 <- mutate(data_m01,popData2018_F_75_79=ceiling(popData2018*F_75_79/100))
data_m01 <- mutate(data_m01,popData2018_M_75_79=ceiling(popData2018*M_75_79/100))
data_m01 <- mutate(data_m01,popData2018_F_80=ceiling(popData2018*F_80/100))
data_m01 <- mutate(data_m01,popData2018_M_80=ceiling(popData2018*M_80/100))
data_m01 <- mutate(group_by(data_m01, country, index10WeekDeaths),avgDeaths10DWeek=mean(as.numeric(deaths), na.rm = TRUE))
data_m01 <- mutate(group_by(data_m01, country),deathsPer1mlnAll=((deaths*(10^6))/popData2018))
data_m01 <- mutate(group_by(data_m01, country),deathsPer1mln80=((deaths*(10^6))/(popData2018_F_80+popData2018_M_80)))
data_m01 <- mutate(group_by(data_m01, country),deathsPer1mln70=((deaths*(10^6))/(popData2018_F_80+popData2018_M_80+popData2018_F_75_79+popData2018_M_75_79+popData2018_F_70_74+popData2018_M_70_74)))
data_m01 <- mutate(group_by(data_m01, country, index10WeekDeaths),avgDeaths10DWeek1mA=mean(as.numeric(deathsPer1mlnAll), na.rm = TRUE))
data_m01 <- mutate(group_by(data_m01, country, index10WeekDeaths),avgDeaths10DWeek1m80=mean(as.numeric(deathsPer1mln80), na.rm = TRUE))
data_m01 <- mutate(group_by(data_m01, country, index10WeekDeaths),avgDeaths10DWeek1m70=mean(as.numeric(deathsPer1mln70), na.rm = TRUE))
data_m01 <- mutate(data_m01,cumsumDeathsPer1mA=ceiling((cumsumDeaths*(10^6))/(popData2018)))
data_m01 <- mutate(data_m01,cumsumCasesPer1mA=ceiling((cumsumCases*(10^6))/(popData2018)))
data_m01 <- mutate(data_m01,cumsumDeathsPer1m70=ceiling((cumsumDeaths*(10^6))/(popData2018_F_80+popData2018_M_80+popData2018_F_75_79+popData2018_M_75_79+popData2018_F_70_74+popData2018_M_70_74)))
data_m01 <- mutate(data_m01,cumsumCasesPer1m70=ceiling((cumsumCases*(10^6))/(popData2018_F_80+popData2018_M_80+popData2018_F_75_79+popData2018_M_75_79+popData2018_F_70_74+popData2018_M_70_74)))
#add data from previus and next term
danePrevNext <- data_m01[which((data_m01$index10Deaths%%7)==1),c(CONST_COUNTRYID_KEY,'index10WeekDeaths',"avgDeaths10DWeek")]
danePrevNext <- mutate(danePrevNext,index10WeekDeathsPrv=index10WeekDeaths+1)
danePrevNext <- mutate(danePrevNext,avgDeaths10DWeekPrv=avgDeaths10DWeek)
danePrevNext <- mutate(danePrevNext,index10WeekDeathsNext=index10WeekDeaths-1)
danePrevNext <- mutate(danePrevNext,avgDeaths10DWeekNext=avgDeaths10DWeek)
data_m01 <- merge(x=data_m01, y=danePrevNext[,c(CONST_COUNTRYID_KEY, 'index10WeekDeathsPrv','avgDeaths10DWeekPrv')], by.x = c(CONST_COUNTRYID_KEY, 'index10WeekDeaths'), by.y = c(CONST_COUNTRYID_KEY, 'index10WeekDeathsPrv'), all.x = TRUE)
data_m01 <- merge(x=data_m01, y=danePrevNext[,c(CONST_COUNTRYID_KEY, 'index10WeekDeathsNext','avgDeaths10DWeekNext')], by.x = c(CONST_COUNTRYID_KEY, 'index10WeekDeaths'), by.y = c(CONST_COUNTRYID_KEY, 'index10WeekDeathsNext'), all.x = TRUE)
data_m01[["avgDeaths10DWeekPrv"]][is.na(data_m01[["avgDeaths10DWeekPrv"]])] <- 0
#join (enrichment) data with data about country
data_m02 <- merge(x=data_m01, y=df_Country_01, by = CONST_COUNTRYID_KEY, all=FALSE)
##dateRep has to by not null
data_m02 <- data_m02[!is.na(data_m02$dateRep),]
data_m02 <- data_m02[!is.na(data_m02$countryID),]
#create dict dataSet with all country (name, country_ID)
df_Country_DICT <- data_m02[, c("countryCommonName", "countryOfficialName", 'countryID','country')]
#UNIQ POSITION
df_Country_DICT <- unique(df_Country_DICT)
#coutryID has to by not null
df_Country_DICT <- df_Country_DICT[!is.na(df_Country_DICT$countryID),]
#one name of country has to by not null
df_Country_DICT <- df_Country_DICT[(!is.na(df_Country_DICT$countryCommonName))|(!is.na(df_Country_DICT$countryOfficialName))|(!is.na(df_Country_DICT$country)),]
#clear variables
rm(data_m00)
rm(df_WordBank_PSum)
rm(danePrevNext)
rm(data_m01)
rm(df_Country_01)
#######################################################
#
# MAIN - LOAD (EXPORT) DATA SECTION
#
#######################################################
# lexport data to databas or other packages
df_COVID19Base <- data_m02
df_Country_DICT <-df_Country_DICT
#######################################################
#
# FINAL SECTION
#
#######################################################
#Remove all variables without CAST_EXPORT_DATASET
ls_VariablesToRm <- NULL
ls_VariablesToRm <- ls()
ls_VariablesToRm <-ls_VariablesToRm[! ls_VariablesToRm %in% CONST_EXPORT_DATASET]
rm(list=ls_VariablesToRm)
gc()
#R project
#Script name     :covid19_01MAP_v10.R
#Description     :This script will create map about covic19
#
#
#Author		               :Roman Ch?dzy?ski
#Last modification date  :2020-04-19
#Last R_version    :R version 3.6.3
#
# v1.0 by Roman Ch?dzy?ski - initial version
#TO DO
#1. legenda
#2 funcja
#######################################################
#
# INIT - INITIAL SECTION
#
#######################################################
#clear terminal
cat("\f")
#Remove all variables without CONST_IMPORT_DATASET
CONST_IMPORT_DATASET = c('df_COVID19Base', 'df_Country_DICT')
ls_VariablesToRm <- NULL
ls_VariablesToRm <- ls()
#jezeli nie ma to od razu b?ad i wyjscie
ls_VariablesToRm <-ls_VariablesToRm[! ls_VariablesToRm %in% CONST_IMPORT_DATASET]
rm(list=ls_VariablesToRm)
#clear memory
gc()
###############################
# INIT- LIBRARY SECTION
#these libraries are necessary
if(!require("utils")) install.packages("utils")
library(utils)
if(!require("leaflet")) install.packages("leaflet")
library(leaflet)
if(!require("rgdal")) install.packages("rgdal")
library(rgdal)
if(!require("lubridate")) install.packages("lubridate")
library(lubridate)
if(!require("htmltools")) install.packages("htmltools")
library(htmltools)
if(!require("zoo")) install.packages("zoo")
library(zoo)
if(!require("mapview")) install.packages("mapview")
library(mapview)
if(!require("webshot")) install.packages("webshot")
library(webshot)
if(!require("htmlwidgets")) install.packages("htmlwidgets")
library(htmlwidgets)
install_phantomjs()
###############################
# INIT- FUNCTION AND SECTION
#function add title of map
tag.map.title <- tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 16px;
}
"))
#function error handling
trySilent <- function(code, silent =TRUE) {
tryCatch(code, error = function(c) {
msg <- conditionMessage(c)
if (!silent) message(c)
invisible(structure(msg, class = "try-error"))
})
}
#create geometric seqences - form range collor palette
geomSeq <- function(start,ratio,begin,end){
begin=begin-1
end=end-1
start*ratio**(begin:end)
}
###############################
# INIT- CONST AND GLOBAL VAR SECTION
#Exported or dont clear datasets
CONST_EXPORT_DATASET <- CONST_IMPORT_DATASET
#use data with new dataSet for Covid
df_COVID19Base_MAP <- df_COVID19Base
#files with country shape (map)
CONST_COUTRYSHAPE_FILE <- "C:/R_project_pja/shape/Countries_WGS84"
#path to save map file
CONST_save_folder_name <- "C:/R_project_pja/map/"
#key for identity country
CONST_COUNTRY_KEY <- "country"
CONST_COUNTRYID_KEY <- "countryID"
#date for first and last (map)
CONST_START_DATE_MAP <- '2020-04-24'
CONST_STOP_DATE_MAP <- ymd((today("GMT") -1)) # default yesterday
#CONSTANT part of map
#copyright
CONST_strCopyrightHtml <- "MIT License, Copyright (c) [2020] [Roman Chadzymski]"
CONST_copyrightHtml <- tags$div(HTML(CONST_strCopyrightHtml))
CONST_strCopyrightPng <- "<font size='1'>MIT License,(c) [Roman Chadznski]</font>"
CONST_copyrightPng <- tags$div(HTML(CONST_strCopyrightPng))
#add a color palette for cumulative deaths - "CumDeath"
colors_CumDeath <-  c('green','#238b45','#a1d99b','#fec69d','#fd9c55', '#fd8d3c', '#fc4e2a', '#e31a1c', '#e31a1c', '#800026', 'black')
value_gt_CumDeath <- c(-1,3,6,12,24,48,96,2200, 6500,13000, 26000)
value_lo_CumDeath <- c(10,20,40,80,250,750,2200,6500,13000,26000,100000)
#add a color palette for cumulative deaths - "DeathPre1m70"
colors_CumDeathPre1m70 <- c('green','#238b45','#a1d99b','#fec69d','#fd9c55', '#fd8d3c', '#fc4e2a', '#e31a1c', '#e31a1c', '#800026', 'black')
value_gt_CumDeathPre1m70 <- c(-1,geomSeq(4, 2 , 1, 10))
value_lo_CumDeathPre1m70 <- c(4,geomSeq(4, 2 , 2, 11))
value_lo_CumDeathPre1m70[length(value_lo_CumDeathPre1m70)] <- value_lo_CumDeathPre1m70[length(value_lo_CumDeathPre1m70)]*2
#add a color palette for cumulative deaths - "DeathPre1mA"
colors_CumDeathPre1mA <- c('green','#238b45','#a1d99b','#fec69d','#fd9c55', '#fd8d3c', '#fc4e2a', '#e31a1c', '#e31a1c', '#800026', 'black')
value_gt_CumDeathPre1mA <- c(-1,geomSeq(1, 2 , 1, 10))
value_lo_CumDeathPre1mA <- c(4,geomSeq(1, 2 , 2, 11))
value_lo_CumDeathPre1mA[length(value_lo_CumDeathPre1mA)] <- value_lo_CumDeathPre1mA[length(value_lo_CumDeathPre1mA)]*2
#add dataFrame color palette
CONST_df_collor_palette <- data.frame(colors_CumDeath, value_gt_CumDeath, value_lo_CumDeath,
colors_CumDeathPre1m70, value_gt_CumDeathPre1m70, value_lo_CumDeathPre1m70,
colors_CumDeathPre1mA, value_gt_CumDeathPre1mA, value_lo_CumDeathPre1mA)
#removes vector use to create dataFrame
rm( list= c("colors_CumDeath", "value_gt_CumDeath", "value_lo_CumDeath",
"colors_CumDeathPre1m70", "value_gt_CumDeathPre1m70", "value_lo_CumDeathPre1m70",
"colors_CumDeathPre1mA", "value_gt_CumDeathPre1mA", "value_lo_CumDeathPre1mA"))
#add title form map
CONST_prefix_file_for_use <- c(1,2,3)
CONST_prefix_file  <- c("CumDeath","CumDeathPre1m70", "CumDeathPre1mA")
CONST_title_map <- c("summary mortality -- MAP OF COVID-19 CORONAVIRUS PANDEMIC" ,"MAP OF COVID-19 CORONAVIRUS PANDEMIC (mortality per capita over 70)","mortality per capita -- MAP OF COVID-19 CORONAVIRUS PANDEMIC")
#######################################################
#
# MAIN - EXTRACT (IMPORT) DATA SECTION
#
#######################################################
###############################
# MAIN - Load shape of map
#load map layer with shape
Country.map <- readOGR(dsn = CONST_COUTRYSHAPE_FILE , layer = "Countries_WGS84", stringsAsFactors = FALSE)
setnames(Country.map@data, "CNTRY_NAME", CONST_COUNTRY_KEY)
#join (enrichment) add shapes
df_country_OK <- merge(x=Country.map@data, y=df_Country_DICT, by = CONST_COUNTRY_KEY, all.x=TRUE)
setnames(df_country_OK, "countryID",  "countryID_01")
df_country_OK <- merge(x=df_country_OK, y=df_Country_DICT, by.x = CONST_COUNTRY_KEY, by.y = 'countryCommonName' , all.x=TRUE)
setnames(df_country_OK, "countryID",  "countryID_02")
df_country_OK <- merge(x=df_country_OK, y=df_Country_DICT, by.x = CONST_COUNTRY_KEY, by.y = 'countryOfficialName' , all.x=TRUE)
setnames(df_country_OK, "countryID",  "countryID_03")
df_country_OK <- df_country_OK[, c("country", 'OBJECTID', 'countryID_01','countryID_02','countryID_03')]
df_country_OK <- unite(df_country_OK, 'countryID' , c('countryID_01','countryID_02','countryID_03'))
df_country_OK$countryID <- gsub('NA_', '', df_country_OK$countryID)
df_country_OK$countryID <- substr(df_country_OK$countryID,1,3)
#coutryID exeption
df_country_OK[df_country_OK$OBJECTID==21,]$countryID <- 'BHS' #Bahamas BHS
df_country_OK[df_country_OK$OBJECTID==26,]$countryID <- 'MMR' #Myanma MMR
df_country_OK[df_country_OK$OBJECTID==28,]$countryID <- 'BLR' #Belarus BLR
df_country_OK[df_country_OK$OBJECTID==80,]$countryID <- 'GMB' #Gambia  GMB
#coutryID has to by not null
df_country_OKF <- df_country_OK[df_country_OK$countryID!='NA',]
#coutryID has to by null, ERROR SET
df_country_NA <- df_country_OK[df_country_OK$countryID=='NA',]
#join (enrichment) add shapes to coutryID
Country.map <- merge(x=Country.map, y=df_country_OKF[,c('OBJECTID',"countryID")], by = 'OBJECTID', all=FALSE)
###############################
# MAIN - add colums (enrichment) with color pallet to base co
#add a color palette based on the cumulative number of deaths
paletteColor <- CONST_df_collor_palette[,c(1:3)]
df_COVID19Base_MAP[,'colors_CumDeath'] <- "green"
for (i in 1:11) {
trySilent(df_COVID19Base_MAP[(!is.na(df_COVID19Base_MAP$cumsumDeaths)) & df_COVID19Base_MAP$cumsumDeaths>paletteColor[i,2] & df_COVID19Base_MAP$cumsumDeaths<=paletteColor[i,3],'colors_CumDeath'] <- as.character(paletteColor[i,1]))
}
#add a color palette based on the cumulative number of deaths per DeathsPer1m7
paletteColor <- CONST_df_collor_palette[,c(4:6)]
df_COVID19Base_MAP[,'colors_CumDeathPre1m70'] <- "green"
for (i in 1:11) {
trySilent(df_COVID19Base_MAP[(!is.na(df_COVID19Base_MAP$cumsumDeathsPer1m70)) & df_COVID19Base_MAP$cumsumDeathsPer1m70>paletteColor[i,2] & df_COVID19Base_MAP$cumsumDeathsPer1m70<=paletteColor[i,3],'colors_CumDeathPre1m70'] <- as.character(paletteColor[i,1]))
}
#add a color palette based on the cumulative number of deaths per DeathsPer1mA
paletteColor <- CONST_df_collor_palette[,c(7:9)]
df_COVID19Base_MAP[,'colors_CumDeathPre1mA'] <- "green"
for (i in 1:11) {
trySilent(df_COVID19Base_MAP[(!is.na(df_COVID19Base_MAP$cumsumDeathsPer1mA)) & df_COVID19Base_MAP$cumsumDeathsPer1mA>paletteColor[i,2] & df_COVID19Base_MAP$cumsumDeathsPer1mA<=paletteColor[i,3],]$colors_CumDeathPre1mA <- as.character(paletteColor[i,1]))
}
###############################
# MAIN - Genreate of map
for (dateRaport in  seq(from = as.Date(CONST_START_DATE_MAP), to = as.Date(CONST_STOP_DATE_MAP), by = 1)) {
print(format(as.Date(dateRaport), "%d/%m/%Y"))
#filter data for one map (on date)
data_M_01 <- df_COVID19Base_MAP[df_COVID19Base_MAP$dateRep==format(as.Date(dateRaport), "%d/%m/%Y"),]
data_M_01$ID <- seq.int(nrow(data_M_01))
#join (enrichment) add shapes
data_M_01 <- merge(x=Country.map, y=data_M_01, by = CONST_COUNTRYID_KEY, all=FALSE)
#crete label for map
PopulationOver70 = data_M_01@data$popData2018_F_70_74 + data_M_01@data$popData2018_M_70_74 + data_M_01@data$popData2018_F_75_79 + data_M_01@data$popData2018_M_75_79+ data_M_01@data$popData2018_F_80 + data_M_01@data$popData2018_M_80
data_M_01@data$label <- paste("<p><font size='3'> <b>",data_M_01@data$countryOfficialName,"</b></font></p>",
"<p>deaths:",data_M_01@data$cumsumDeaths ,"</p>",
"<p>daysAfter10Deaths:",data_M_01@data$index10Deaths ,"</p>",
"<p>weeksAfter10Deaths:",data_M_01@data$index10WeekDeaths,"</p>",
"<p>-----------------------------------------</p>",
"<p>cases:",data_M_01@data$cumsumCases,"</p>",
"<p>daysAfter100Cases:",data_M_01@data$index100Cases,"</p>",
"<p>weeksAfter100Cases:",data_M_01@data$index100WeekCases,"</p>",
"<p>-----------------------------------------</p>",
"<p>population:",ceiling(data_M_01@data$popData2018/(10^6)),"mln</p>",
"<p>populationOver70:",ceiling(PopulationOver70/(10^6)),"mln</p>"
)
# dg data_M_01 , vector colorki, tytu?
generateMap <- function(colorsShape, titleMap, save_prefix_name) {
map_html <-leaflet(data = data_M_01) %>%
addTiles() %>%
addControl(titleMap, position = "topleft", className="map-title") %>%
addControl(CONST_copyrightHtml, position = "bottomleft") %>%
addProviderTiles(providers$Stamen.TonerLite) %>%
setView(lat = 52, lng=20, zoom = 3)  %>%
addPolygons(fillColor =  colorsShape,
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1) %>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = "white",
radius = 0,
label = lapply(data_M_01@data$label,HTML),
group = 'general')%>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = '#1919ff',
radius = ifelse(data_M_01@data$index10WeekDeaths<3, data_M_01@data$index10WeekDeaths*5,0),
label = lapply(data_M_01@data$label,HTML),
group = '1-2_weeksAfter10Death') %>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = '#00004c',
radius = ifelse((data_M_01@data$index10WeekDeaths>2 & data_M_01@data$index10WeekDeaths<5), data_M_01@data$index10WeekDeaths*5,0),
label = lapply(data_M_01@data$label,HTML),
group = '3-4_weeksAfter10Death') %>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = '#000000',
radius = ifelse((data_M_01@data$index10WeekDeaths>4 & data_M_01@data$index10WeekDeaths<7), data_M_01@data$index10WeekDeaths*5,0),
label = lapply(data_M_01@data$label,HTML),
group = '5-6_weeksAfter10Death') %>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = '#b2b2ff',
radius = ifelse((data_M_01@data$index10WeekDeaths>6), data_M_01@data$index10WeekDeaths*5,0),
label = lapply(data_M_01@data$label,HTML),
group = '>=7_weeksAfter10Death') %>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = 'red',
radius = ifelse(((data_M_01@data$avgDeaths10DWeek-data_M_01@data$avgDeaths10DWeekPrv)/data_M_01@data$avgDeaths10DWeek)<0,0,10),
label = lapply(data_M_01@data$label,HTML),
group = 'avgDeath-UP') %>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = 'green',
radius = ifelse(((data_M_01@data$avgDeaths10DWeek-data_M_01@data$avgDeaths10DWeekPrv)/data_M_01@data$avgDeaths10DWeek)<0,10,0),
label = lapply(data_M_01@data$label,HTML),
group = 'avgDeath-DOWN') %>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = 'green',
radius = ifelse(((data_M_01@data$avgDeaths10DWeek-data_M_01@data$avgDeaths10DWeekPrv)/data_M_01@data$avgDeaths10DWeek)<0,10,0),
label = lapply(data_M_01@data$label,HTML),
group = 'avgDeath-DOWN') %>%
addCircleMarkers(lng = data_M_01@data$lng,
lat = data_M_01@data$lat,
color = 'yellow',
radius = ((data_M_01@data$popData2018_F_70_74 + data_M_01@data$popData2018_M_70_74 + data_M_01@data$popData2018_F_75_79 + data_M_01@data$popData2018_M_75_79+ data_M_01@data$popData2018_F_80 + data_M_01@data$popData2018_M_80)/(10^6)),
label = lapply(data_M_01@data$label,HTML),
group = 'popultionOver70mln') %>%
addLayersControl(baseGroups = c("(default)","1-2_weeksAfter10Death","3-4_weeksAfter10Death","5-6_weeksAfter10Death",">=7_weeksAfter10Death", "popultionOver70mln", "avgDeath-UP", "avgDeath-DOWN"),
overlayGroups = c("avgDeath-UP", "avgDeath-DOWN","popultionOver70mln"),
options = layersControlOptions(collapsed = FALSE,  autoZIndex = TRUE)
)
#save map as file
saveWidget(map_html, file = paste(CONST_save_folder_name,paste(save_prefix_name,paste(as.Date(dateRaport),"html", sep = "."), sep = "_")))
}
for ( x in CONST_prefix_file_for_use) {
#title form map
strTitle <- paste(CONST_title_map[x], as.Date(dateRaport), sep = ' -- ')
titleHtml <- tags$div(
tag.map.title, HTML(strTitle)
)
#prefix map name
save_prefix_name <- CONST_prefix_file[x]
#color of shape
name_colour_column <- paste('colors_',CONST_prefix_file[x], sep = '')
dataColorColumn <- data_M_01@data[,name_colour_column]
#generate map
generateMap(dataColorColumn, titleHtml, save_prefix_name)
}
}
